cmake_minimum_required (VERSION 3.0.0)
include(CheckFunctionExists)

option(ENABLE_SDR_AIRSPY                "Enable Airspy Support"                                  ON)
option(ENABLE_SDR_RTLSDR                "Enable RTL-SDR Support"                                 ON)
option(ENABLE_SDR_HACKRF                "Enable HackRF Support."                                 ON)
option(ENABLE_SDR_AIRSPYHF              "Enable AirspyHF Support."                               ON)
option(ENABLE_SDR_LIMESDR               "Enable LimeSDR Support."                                ON)
option(ENABLE_SDR_SDRPLAY               "Enable SDRPlay Support."                                ON)
option(ENABLE_SDR_SPYSERVER             "Enable SpyServer Support."                              ON)
option(ENABLE_SDR_RTLTCP                "Enable RTL-TCP Support."                                ON)
option(ENABLE_SDR_PLUTOSDR              "Enable PlutoSDR Support."                               ON)

file(GLOB_RECURSE LIBSDR_CPPS  sdr/*.cpp)

add_library(sdr STATIC ${LIBSDR_CPPS})
target_include_directories(sdr PUBLIC . ../src-core)
set_target_properties(sdr PROPERTIES COMPILE_DEFINITIONS BUILDER_STATIC_DEFINE)

target_link_libraries(sdr PUBLIC satdump_core)

# We don't enable everything on Android...
if(ANDROID)
        set(ENABLE_SDR_AIRSPY ON)
        set(ENABLE_SDR_RTLSDR ON)
        set(ENABLE_SDR_HACKRF OFF)
        set(ENABLE_SDR_SDRPLAY OFF)
        set(ENABLE_SDR_AIRSPYHF ON)
        set(ENABLE_SDR_LIMESDR OFF)
        set(ENABLE_SDR_SPYSERVER ON)
        set(ENABLE_SDR_RTLTCP OFF)
        set(ENABLE_SDR_PLUTOSDR OFF)
endif()

if(NOT ENABLE_SDR_AIRSPY)
target_compile_definitions(sdr PUBLIC DISABLE_SDR_AIRSPY="1")
endif()
if(NOT ENABLE_SDR_RTLSDR)
target_compile_definitions(sdr PUBLIC DISABLE_SDR_RTLSDR="1")
endif()
if(NOT ENABLE_SDR_HACKRF)
target_compile_definitions(sdr PUBLIC DISABLE_SDR_HACKRF="1")
endif()
if(NOT ENABLE_SDR_AIRSPYHF)
target_compile_definitions(sdr PUBLIC DISABLE_SDR_AIRSPYHF="1")
endif()
if(NOT ENABLE_SDR_LIMESDR)
target_compile_definitions(sdr PUBLIC DISABLE_SDR_LIMESDR="1")
endif()
if(NOT ENABLE_SDR_SDRPLAY)
target_compile_definitions(sdr PUBLIC DISABLE_SDR_SDRPLAY="1")
endif()
if(NOT ENABLE_SDR_SPYSERVER)
target_compile_definitions(sdr PUBLIC DISABLE_SDR_SPYSERVER="1")
endif()
if(NOT ENABLE_SDR_RTLTCP)
target_compile_definitions(sdr PUBLIC DISABLE_SDR_RTLTCP="1")
endif()
if(NOT ENABLE_SDR_PLUTOSDR)
target_compile_definitions(sdr PUBLIC DISABLE_SDR_PLUTOSDR="1")
endif()

if(BUILD_ZIQ)
    target_compile_definitions(sdr PUBLIC BUILD_ZIQ="1")
endif()

if(MSVC)
        if(ENABLE_SDR_AIRSPY)
                target_link_libraries(sdr PUBLIC airspy.dll)
        endif()
        if(ENABLE_SDR_RTLSDR)
                target_link_libraries(sdr PUBLIC rtlsdr.dll)
        endif()
        if(ENABLE_SDR_HACKRF)
                target_link_libraries(sdr PUBLIC hackrf.dll)
        endif()
        if(ENABLE_SDR_AIRSPYHF)
                target_link_libraries(sdr PUBLIC airspyhf.dll)
        endif()
        if(ENABLE_SDR_LIMESDR)
                target_link_libraries(sdr PUBLIC LimeSuite.dll)
        endif()
        if(ENABLE_SDR_SDRPLAY)
                target_link_libraries(sdr PUBLIC sdrplay_api.dll)
        endif()
        if(ENABLE_SDR_RTLTCP)
                target_link_libraries(sdr PUBLIC wsock32 ws2_32)
        endif()
        if(ENABLE_SDR_PLUTOSDR)
                target_link_libraries(sdr PUBLIC libiio.dll)
                target_link_libraries(sdr PUBLIC libad9361.dll)
        endif()
        #target_link_libraries(sdr PUBLIC LimeSuite.dll)
else()
        if(ANDROID)
                if(ENABLE_SDR_RTLSDR)
                        target_link_libraries(sdr PUBLIC rtlsdr)
                endif()
                if(ENABLE_SDR_AIRSPY)
                        target_link_libraries(sdr PUBLIC airspy)
                endif()
                if(ENABLE_SDR_AIRSPYHF)
                        target_link_libraries(sdr PUBLIC airspyhf)
                endif()
        else()
                find_library(AIRSPY_LIBRARY airspy)
                find_library(RTLSDR_LIBRARY rtlsdr)
                find_library(HACKRF_LIBRARY hackrf)
                find_library(AIRSPYHF_LIBRARY airspyhf)
                find_library(LIMESUITE_LIBRARY LimeSuite)
                find_library(SDRPLAY_LIBRARY sdrplay_api)
                find_library(LibIIO_LIBRARY NAMES iio libiio)
                find_library(LibAD9361_LIBRARY NAMES ad9361 libad9361)

                if(ENABLE_SDR_AIRSPY AND AIRSPY_LIBRARY)
                        # Airspy
                        message("Building with Airspy support")
                        target_link_libraries(sdr PUBLIC ${AIRSPY_LIBRARY})
                else()
                        target_compile_definitions(sdr PUBLIC DISABLE_SDR_AIRSPY="1")
                endif()
                if(ENABLE_SDR_RTLSDR AND RTLSDR_LIBRARY)
                        # RTL-SDR
                        message("Building with RTL-SDR support")
                        target_link_libraries(sdr PUBLIC ${RTLSDR_LIBRARY})
                else()
                        target_compile_definitions(sdr PUBLIC DISABLE_SDR_RTLSDR="1")
                endif()
                if(ENABLE_SDR_HACKRF AND HACKRF_LIBRARY)
                        # HackRF
                        message("Building with HackRF support")
                        target_link_libraries(sdr PUBLIC ${HACKRF_LIBRARY})
                else()
                        target_compile_definitions(sdr PUBLIC DISABLE_SDR_HACKRF="1")
                endif()
                if(ENABLE_SDR_AIRSPYHF AND AIRSPYHF_LIBRARY)
                        # AirspyHF
                        message("Building with AirspyHF support")
                        target_link_libraries(sdr PUBLIC ${AIRSPYHF_LIBRARY})
                else()
                        target_compile_definitions(sdr PUBLIC DISABLE_SDR_AIRSPYHF="1")
                endif()
                if(ENABLE_SDR_LIMESDR AND LIMESUITE_LIBRARY)
                        # LimeSDR
                        message("Building with LimeSDR support")
                        target_link_libraries(sdr PUBLIC ${LIMESUITE_LIBRARY})
                else()
                        target_compile_definitions(sdr PUBLIC DISABLE_SDR_LIMESDR="1")
                endif()
                if(SDRPLAY_LIBRARY)
                        # SDRPlay
                        message("Building with SDRPlay support")
                        target_link_libraries(sdr PUBLIC ${SDRPLAY_LIBRARY})
                else()
                        target_compile_definitions(sdr PUBLIC DISABLE_SDR_SDRPLAY="1")
                endif()
                if(ENABLE_SDR_PLUTOSDR AND LibAD9361_LIBRARY AND LibIIO_LIBRARY)
                        # PlutoSDR
                        message("Building with PlutoSDR support")
                        target_link_libraries(sdr PUBLIC ${LibAD9361_LIBRARY})
                        target_link_libraries(sdr PUBLIC ${LibIIO_LIBRARY})
                else()
                        target_compile_definitions(sdr PUBLIC DISABLE_SDR_PLUTOSDR="1")
                endif()
        endif()
endif()

if(NOT ANDROID)
        set(CMAKE_REQUIRED_LIBRARIES ${RTLSDR_LIBRARIES})
        check_function_exists(rtlsdr_set_bias_tee HAS_RTLSDR_SET_BIAS_TEE)
        target_compile_definitions(sdr PUBLIC HAS_RTLSDR_SET_BIAS_TEE="1")
        unset(CMAKE_REQUIRED_LIBRARIES)
endif()